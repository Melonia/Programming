package dynamic;

import java.util.Scanner;

public class N11054 {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		int N = scan.nextInt();
		int[] seq = new int[N];
		for (int i = 0; i < N; i++) {
			seq[i] = scan.nextInt();
		}

	
		int[] result = new int[N];
		if(N==1) {
			System.out.println(1);
			return;
		}
		for (int i = 0; i < N; i++) {
			int[] dp = new int[N];
			dp[i] = 1;
		
			for (int j = i-1; j >= 0; j--) {
				int max = 0;
				for (int k = j+1; k <= i; k++) {

					if (seq[j] < seq[k]) {
						if (max < dp[k]) {
							max = dp[k];
						}
					}

				}
				dp[j] = max + 1;
			}

			for (int j = i+1; j < N; j++) {
				int max = 0;
				for (int k = j-1; k >= i; k--) {
					if (seq[j] < seq[k]) {
						if (max < dp[k]) {
							max = dp[k];
						}
					}
				}
				dp[j] = max + 1;
			}
		
			result[i] = max(i, dp) - 1;
		}
		
		System.out.println(max(result));
	}

	static int max(int... values) {
		int max = 0;
		for (int value : values) {
			if (max < value)
				max = value;
		}
		return max;
	}

	static int max(int index, int[] dp) {
		int max1 = 0;
		int max2 = 0;
		for (int i = 0; i < index; i++) {
			if (max1 < dp[i])
				max1 = dp[i];
		}
		for (int i = index + 1; i < dp.length; i++) {
			if (max2 < dp[i])
				max2 = dp[i];
		}
		return max1 + max2;
	}
}
/*
문제
수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.

예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.

수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.
*/